module TestModule;



data Val = IntVal(Int intVal)| PtrVal(Ptr ptrVal);

data Ptr = NullPtr| Ptr(Loc loc);

data Loc = Loc(Mem mem, Int offset);

interface Mem {
        Val getVal(Int offset);
        Unit setVal(Int offset, Val newVal);
}

def List<A> replace<A>(List<A> l, Int i, A a) = 
        if ( i == 0 ) then Cons( a, tail(l) ) else Cons( head(l), replace(tail(l), ( i - 1 ), a) );

class Mem(List<Val> vals) implements Mem {
        
        
        Val getVal(Int offset){
                return nth(this.vals, offset);
        }
        Unit setVal(Int offset, Val newVal){
                this.vals = replace(this.vals, offset, newVal);
        }
        }

interface Function_fact {
        Val call();
}

class Function_fact(List<Loc> globalVars, List<Loc> params) implements Function_fact {
        List<Loc> localVars = Nil;
        
        Val call(){
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Val> tmp_1 = this!getVal_val(nth(this.params, 0));
                        Fut<Val> tmp_2 = this!cmp_lt_int_fut_val(tmp_1, 2);
                        await tmp_2?;
                        Val tmp_11 = tmp_2.get;
                        if ( ( intVal(tmp_11) != 0 ) ){
                                result = IntVal( 1 );
                                returnFlag = True;
                        } else {
                                Fut<Val> tmp_3 = this!getVal_val(nth(this.params, 0));
                                Fut<Val> tmp_4 = this!getVal_val(nth(this.params, 0));
                                Fut<Val> tmp_5 = this!op_minus_fut_val(tmp_4, 1);
                                Fut<Val> tmp_6 = this!call_fact_fut_0(tmp_5);
                                Fut<Val> tmp_7 = this!op_mult_fut_fut(tmp_3, tmp_6);
                                await tmp_7?;
                                result = tmp_7.get;
                                returnFlag = True;
                        }
                }
                return result;
        }
        Val call_fact_fut_0(Fut<Val> fut_arg1){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(arg1, 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_fact tmp_8 = new Function_fact(this.globalVars, params);
                Fut<Val> tmp_9 = tmp_8!call();
                Val tmp_10 = tmp_9.get;
                return tmp_10;
        }
        Val op_mult_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( ( intVal(arg1) * intVal(arg2) ) );
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Val op_minus_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( ( intVal(arg1) - arg2 ) );
        }
        Val cmp_lt_int_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( if ( arg1 < IntVal( arg2 ) ) then 1 else 0 );
        }
        }

interface Function_arrayFactorial {
        Val call();
}

class Function_arrayFactorial(List<Loc> globalVars, List<Loc> params) implements Function_arrayFactorial {
        List<Loc> localVars = Nil;
        
        Val call(){
                Mem mem_0 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_0, 0 ));
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Val> tmp_12 = this!getVal_val(nth(this.params, 1));
                        Fut<Loc> tmp_13 = this!deref_fut(tmp_12);
                        Fut<Val> tmp_14 = this!getVal_fut(tmp_13);
                        await tmp_14?;
                        Val tmp_15 = tmp_14.get;
                        Fut<Unit> tmp_16 = mem(nth(this.localVars, 0))!setVal(0, tmp_15);
                        tmp_16.get;
                        Fut<Val> tmp_17 = this!getVal_val(nth(this.localVars, 0));
                        Fut<Val> tmp_18 = this!cmp_ge_int_val_fut(( 10 - 1 ), tmp_17);
                        await tmp_18?;
                        Val tmp_33 = tmp_18.get;
                        if ( ( intVal(tmp_33) != 0 ) ){
                                Fut<Val> tmp_19 = this!getVal_val(nth(this.params, 0));
                                Fut<Val> tmp_20 = this!getVal_val(nth(this.params, 1));
                                Fut<Loc> tmp_21 = this!deref_fut(tmp_20);
                                Fut<Val> tmp_22 = this!getVal_fut(tmp_21);
                                Fut<Loc> tmp_23 = this!pointerSubscript_fut_fut(tmp_19, ( 10 * 1 ), tmp_22);
                                Fut<Val> tmp_24 = this!decay_fut(tmp_23);
                                Fut<Loc> tmp_25 = this!deref_fut(tmp_24);
                                Fut<Val> tmp_27 = this!getVal_val(nth(this.localVars, 0));
                                Fut<Val> tmp_28 = this!call_fact_fut_0(tmp_27);
                                Fut<Unit> tmp_29 = this!setVal_fut_fut(tmp_25, tmp_28);
                                await tmp_28? & tmp_29?;
                        }
                        Fut<Val> tmp_34 = this!getVal_val(nth(this.localVars, 0));
                        Fut<Val> tmp_35 = this!call_fact_fut_0(tmp_34);
                        await tmp_35?;
                        result = tmp_35.get;
                        returnFlag = True;
                }
                return result;
        }
        Val getVal_fut(Fut<Loc> fut_loc){
                await fut_loc?;
                Loc loc = fut_loc.get;
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Unit setVal_fut_fut(Fut<Loc> fut_loc, Fut<Val> fut_value){
                await fut_loc? & fut_value?;
                Loc loc = fut_loc.get;
                Val value = fut_value.get;
                Fut<Unit> se = mem(loc)!setVal(offset(loc), value);
                se.get;
        }
        Loc deref_fut(Fut<Val> fut_ptr){
                await fut_ptr?;
                Val ptr = fut_ptr.get;
                return loc(ptrVal(ptr));
        }
        Loc pointerSubscript_fut_fut(Fut<Val> fut_ptr, Int size, Fut<Val> fut_index){
                await fut_ptr? & fut_index?;
                Val ptr = fut_ptr.get;
                Val index = fut_index.get;
                return Loc( mem(loc(ptrVal(ptr))), ( offset(loc(ptrVal(ptr))) + ( size * intVal(index) ) ) );
        }
        Val decay_fut(Fut<Loc> fut_loc){
                await fut_loc?;
                Loc loc = fut_loc.get;
                return PtrVal( Ptr( loc ) );
        }
        Val call_fact_fut_0(Fut<Val> fut_arg1){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(arg1, 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_fact tmp_30 = new Function_fact(this.globalVars, params);
                Fut<Val> tmp_31 = tmp_30!call();
                Val tmp_32 = tmp_31.get;
                return tmp_32;
        }
        Val cmp_ge_int_val_fut(Int arg1, Fut<Val> fut_arg2){
                await fut_arg2?;
                Val arg2 = fut_arg2.get;
                return IntVal( if ( IntVal( arg1 ) >= arg2 ) then 1 else 0 );
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        }

interface Function_main {
        Val call();
}

class Function_main(List<Loc> globalVars, List<Loc> params) implements Function_main {
        List<Loc> localVars = Nil;
        
        Val call(){
                Mem mem_0 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_0, 0 ));
                Mem mem_1 = new Mem(copy(IntVal( 0 ), ( 10 * 1 )));
                this.localVars = appendright(this.localVars, Loc( mem_1, 0 ));
                Mem mem_2 = new Mem(copy(PtrVal( NullPtr ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_2, 0 ));
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Unit> tmp_37 = this!setPtrVal_val_val(nth(this.localVars, 2), Ptr( nth(this.localVars, 1) ));
                        await tmp_37?;
                        Fut<Val> tmp_38 = this!getVal_val(nth(this.localVars, 2));
                        Fut<Val> tmp_40 = this!call_arrayFactorial_fut_val_0(tmp_38, Ptr( nth(this.globalVars, 0) ));
                        await tmp_40?;
                        result = tmp_40.get;
                        returnFlag = True;
                }
                return result;
        }
        Val call_arrayFactorial_fut_val_0(Fut<Val> fut_arg1, Ptr arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(arg1, 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Mem mem_1 = new Mem(copy(PtrVal( arg2 ), 1));
                params = appendright(params, Loc( mem_1, 0 ));
                Function_arrayFactorial tmp_41 = new Function_arrayFactorial(this.globalVars, params);
                Fut<Val> tmp_42 = tmp_41!call();
                Val tmp_43 = tmp_42.get;
                return tmp_43;
        }
        Unit setPtrVal_val_val(Loc loc, Ptr value){
                Fut<Unit> se = mem(loc)!setVal(offset(loc), PtrVal( value ));
                se.get;
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        }

interface InitI {
        Unit initM();
}

class InitC(List<Loc> globalVars) implements InitI {
        
        
        Unit initM(){
                Mem mem_0 = new Mem(copy(IntVal( 5 ), 1));
                this.globalVars = appendright(this.globalVars, Loc( mem_0, 0 ));
                Function_main main = new Function_main(this.globalVars, Nil);
                Fut<Val> fv = main!call();
                Val v = fv.get;
                println(toString(intVal(v)));
        }
        }


{
        InitI initO = new InitC(Nil);
        Fut<Unit> futureResult = initO!initM();
        await futureResult?;
}
