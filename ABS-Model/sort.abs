module TestModule;



data Val = IntVal(Int intVal)| PtrVal(Ptr ptrVal);

data Ptr = NullPtr| Ptr(Loc loc);

data Loc = Loc(Mem mem, Int offset);

interface Mem {
        Val getVal(Int offset);
        Unit setVal(Int offset, Val newVal);
}

def List<A> replace<A>(List<A> l, Int i, A a) = 
        if ( i == 0 ) then Cons( a, tail(l) ) else Cons( head(l), replace(tail(l), ( i - 1 ), a) );

class Mem(List<Val> vals) implements Mem {
        
        
        Val getVal(Int offset){
                return nth(this.vals, offset);
        }
        Unit setVal(Int offset, Val newVal){
                this.vals = replace(this.vals, offset, newVal);
        }
        }

interface Function_sort {
        Val call();
}

class Function_sort(List<Loc> globalVars, List<Loc> params) implements Function_sort {
        List<Loc> localVars = Nil;
        
        Val call(){
                Mem mem_0 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_0, 0 ));
                Mem mem_1 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_1, 0 ));
                Mem mem_2 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_2, 0 ));
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Unit> tmp_2 = this!setIntVal_val_val(nth(this.localVars, 0), 0);
                        await tmp_2?;
                        Fut<Val> tmp_3 = this!getVal_val(nth(this.localVars, 0));
                        Fut<Val> tmp_4 = this!cmp_lt_int_fut_val(tmp_3, 100);
                        await tmp_4?;
                        Val tmp_61 = tmp_4.get;
                        while (( intVal(tmp_61) != 0 )) {
                                Fut<Val> tmp_9 = this!getVal_val(nth(this.localVars, 0));
                                Fut<Val> tmp_10 = this!op_plus_fut_val(tmp_9, 1);
                                Fut<Unit> tmp_11 = this!setVal_val_fut(nth(this.localVars, 1), tmp_10);
                                await tmp_10? & tmp_11?;
                                Fut<Val> tmp_12 = this!getVal_val(nth(this.localVars, 1));
                                Fut<Val> tmp_13 = this!cmp_lt_int_fut_val(tmp_12, 100);
                                await tmp_13?;
                                Val tmp_60 = tmp_13.get;
                                while (( intVal(tmp_60) != 0 )) {
                                        Fut<Val> tmp_17 = this!getVal_val(nth(this.params, 0));
                                        Fut<Loc> tmp_18 = this!deref_fut(tmp_17);
                                        Fut<Val> tmp_20 = this!getVal_val(nth(this.localVars, 1));
                                        Fut<Loc> tmp_21 = this!subscript_fut_fut(tmp_18, 1, tmp_20);
                                        Fut<Val> tmp_22 = this!getVal_fut(tmp_21);
                                        Fut<Val> tmp_23 = this!getVal_val(nth(this.params, 0));
                                        Fut<Loc> tmp_24 = this!deref_fut(tmp_23);
                                        Fut<Val> tmp_26 = this!getVal_val(nth(this.localVars, 0));
                                        Fut<Loc> tmp_27 = this!subscript_fut_fut(tmp_24, 1, tmp_26);
                                        Fut<Val> tmp_28 = this!getVal_fut(tmp_27);
                                        Fut<Val> tmp_29 = this!cmp_lt_int_fut_fut(tmp_22, tmp_28);
                                        await tmp_29?;
                                        Val tmp_59 = tmp_29.get;
                                        if ( ( intVal(tmp_59) != 0 ) ){
                                                Fut<Val> tmp_31 = this!getVal_val(nth(this.params, 0));
                                                Fut<Loc> tmp_32 = this!deref_fut(tmp_31);
                                                Fut<Val> tmp_34 = this!getVal_val(nth(this.localVars, 0));
                                                Fut<Loc> tmp_35 = this!subscript_fut_fut(tmp_32, 1, tmp_34);
                                                Fut<Val> tmp_36 = this!getVal_fut(tmp_35);
                                                Fut<Unit> tmp_37 = this!setVal_val_fut(nth(this.localVars, 2), tmp_36);
                                                await tmp_36? & tmp_37?;
                                                Fut<Val> tmp_38 = this!getVal_val(nth(this.params, 0));
                                                Fut<Loc> tmp_39 = this!deref_fut(tmp_38);
                                                Fut<Val> tmp_41 = this!getVal_val(nth(this.localVars, 0));
                                                Fut<Loc> tmp_42 = this!subscript_fut_fut(tmp_39, 1, tmp_41);
                                                Fut<Val> tmp_44 = this!getVal_val(nth(this.params, 0));
                                                Fut<Loc> tmp_45 = this!deref_fut(tmp_44);
                                                Fut<Val> tmp_47 = this!getVal_val(nth(this.localVars, 1));
                                                Fut<Loc> tmp_48 = this!subscript_fut_fut(tmp_45, 1, tmp_47);
                                                Fut<Val> tmp_49 = this!getVal_fut(tmp_48);
                                                Fut<Unit> tmp_50 = this!setVal_fut_fut(tmp_42, tmp_49);
                                                await tmp_49? & tmp_50?;
                                                Fut<Val> tmp_51 = this!getVal_val(nth(this.params, 0));
                                                Fut<Loc> tmp_52 = this!deref_fut(tmp_51);
                                                Fut<Val> tmp_54 = this!getVal_val(nth(this.localVars, 1));
                                                Fut<Loc> tmp_55 = this!subscript_fut_fut(tmp_52, 1, tmp_54);
                                                Fut<Val> tmp_57 = this!getVal_val(nth(this.localVars, 2));
                                                Fut<Unit> tmp_58 = this!setVal_fut_fut(tmp_55, tmp_57);
                                                await tmp_57? & tmp_58?;
                                        }
                                        Fut<Val> tmp_14 = this!getVal_val(nth(this.localVars, 1));
                                        Fut<Val> tmp_15 = this!op_plus_fut_val(tmp_14, 1);
                                        Fut<Unit> tmp_16 = this!setVal_val_fut(nth(this.localVars, 1), tmp_15);
                                        await tmp_14? & tmp_16?;
                                        tmp_12 = this!getVal_val(nth(this.localVars, 1));
                                        tmp_13 = this!cmp_lt_int_fut_val(tmp_12, 100);
                                        await tmp_13?;
                                        tmp_60 = tmp_13.get;
                                }
                                Fut<Val> tmp_5 = this!getVal_val(nth(this.localVars, 0));
                                Fut<Val> tmp_6 = this!op_plus_fut_val(tmp_5, 1);
                                Fut<Unit> tmp_7 = this!setVal_val_fut(nth(this.localVars, 0), tmp_6);
                                await tmp_5? & tmp_7?;
                                tmp_3 = this!getVal_val(nth(this.localVars, 0));
                                tmp_4 = this!cmp_lt_int_fut_val(tmp_3, 100);
                                await tmp_4?;
                                tmp_61 = tmp_4.get;
                        }
                        Fut<Val> tmp_62 = this!getVal_val(nth(this.params, 0));
                        Fut<Loc> tmp_63 = this!deref_fut(tmp_62);
                        Fut<Loc> tmp_65 = this!subscript_fut_val(tmp_63, 1, ( 100 - 1 ));
                        Fut<Val> tmp_66 = this!getVal_fut(tmp_65);
                        await tmp_66?;
                        result = tmp_66.get;
                        returnFlag = True;
                }
                return result;
        }
        Val getVal_fut(Fut<Loc> fut_loc){
                await fut_loc?;
                Loc loc = fut_loc.get;
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Loc subscript_fut_val(Fut<Loc> fut_loc, Int size, Int index){
                await fut_loc?;
                Loc loc = fut_loc.get;
                return Loc( mem(loc), ( offset(loc) + ( size * index ) ) );
        }
        Unit setVal_fut_fut(Fut<Loc> fut_loc, Fut<Val> fut_value){
                await fut_loc? & fut_value?;
                Loc loc = fut_loc.get;
                Val value = fut_value.get;
                Fut<Unit> se = mem(loc)!setVal(offset(loc), value);
                se.get;
        }
        Unit setIntVal_val_val(Loc loc, Int value){
                Fut<Unit> se = mem(loc)!setVal(offset(loc), IntVal( value ));
                se.get;
        }
        Loc deref_fut(Fut<Val> fut_ptr){
                await fut_ptr?;
                Val ptr = fut_ptr.get;
                return loc(ptrVal(ptr));
        }
        Loc subscript_fut_fut(Fut<Loc> fut_loc, Int size, Fut<Val> fut_index){
                await fut_loc? & fut_index?;
                Loc loc = fut_loc.get;
                Val index = fut_index.get;
                return Loc( mem(loc), ( offset(loc) + ( size * intVal(index) ) ) );
        }
        Val cmp_lt_int_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( if ( arg1 < arg2 ) then 1 else 0 );
        }
        Unit setVal_val_fut(Loc loc, Fut<Val> fut_value){
                await fut_value?;
                Val value = fut_value.get;
                Fut<Unit> se = mem(loc)!setVal(offset(loc), value);
                se.get;
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Val op_plus_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( ( intVal(arg1) + arg2 ) );
        }
        Val cmp_lt_int_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( if ( arg1 < IntVal( arg2 ) ) then 1 else 0 );
        }
        }

interface Function_main {
        Val call();
}

class Function_main(List<Loc> globalVars, List<Loc> params) implements Function_main {
        List<Loc> localVars = Nil;
        
        Val call(){
                Mem mem_0 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_0, 0 ));
                Mem mem_1 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_1, 0 ));
                Mem mem_2 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_2, 0 ));
                Mem mem_3 = new Mem(copy(IntVal( 0 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_3, 0 ));
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Val> tmp_67 = this!getVal_val(nth(this.localVars, 3));
                        Fut<Val> tmp_68 = this!cmp_lt_int_fut_val(tmp_67, 100);
                        await tmp_68?;
                        Val tmp_78 = tmp_68.get;
                        while (( intVal(tmp_78) != 0 )) {
                                Fut<Val> tmp_72 = this!getVal_val(nth(this.localVars, 3));
                                Fut<Loc> tmp_73 = this!subscript_val_fut(nth(this.globalVars, 0), 1, tmp_72);
                                Fut<Val> tmp_75 = this!getVal_val(nth(this.localVars, 3));
                                Fut<Val> tmp_76 = this!op_minus_val_fut(100, tmp_75);
                                Fut<Unit> tmp_77 = this!setVal_fut_fut(tmp_73, tmp_76);
                                await tmp_76? & tmp_77?;
                                Fut<Val> tmp_69 = this!getVal_val(nth(this.localVars, 3));
                                Fut<Val> tmp_70 = this!op_plus_fut_val(tmp_69, 1);
                                Fut<Unit> tmp_71 = this!setVal_val_fut(nth(this.localVars, 3), tmp_70);
                                await tmp_69? & tmp_71?;
                                tmp_67 = this!getVal_val(nth(this.localVars, 3));
                                tmp_68 = this!cmp_lt_int_fut_val(tmp_67, 100);
                                await tmp_68?;
                                tmp_78 = tmp_68.get;
                        }
                        Fut<Unit> tmp_80 = this!setPtrVal_val_val(nth(this.globalVars, 1), Ptr( nth(this.globalVars, 0) ));
                        await tmp_80?;
                        Fut<Val> tmp_81 = this!getVal_val(nth(this.globalVars, 1));
                        Fut<Val> tmp_82 = this!call_sort_fut_0(tmp_81);
                        await tmp_82?;
                        result = tmp_82.get;
                        returnFlag = True;
                }
                return result;
        }
        Unit setVal_fut_fut(Fut<Loc> fut_loc, Fut<Val> fut_value){
                await fut_loc? & fut_value?;
                Loc loc = fut_loc.get;
                Val value = fut_value.get;
                Fut<Unit> se = mem(loc)!setVal(offset(loc), value);
                se.get;
        }
        Unit setPtrVal_val_val(Loc loc, Ptr value){
                Fut<Unit> se = mem(loc)!setVal(offset(loc), PtrVal( value ));
                se.get;
        }
        Val op_minus_val_fut(Int arg1, Fut<Val> fut_arg2){
                await fut_arg2?;
                Val arg2 = fut_arg2.get;
                return IntVal( ( arg1 - intVal(arg2) ) );
        }
        Loc subscript_val_fut(Loc loc, Int size, Fut<Val> fut_index){
                await fut_index?;
                Val index = fut_index.get;
                return Loc( mem(loc), ( offset(loc) + ( size * intVal(index) ) ) );
        }
        Unit setVal_val_fut(Loc loc, Fut<Val> fut_value){
                await fut_value?;
                Val value = fut_value.get;
                Fut<Unit> se = mem(loc)!setVal(offset(loc), value);
                se.get;
        }
        Val call_sort_fut_0(Fut<Val> fut_arg1){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(arg1, 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_sort tmp_83 = new Function_sort(this.globalVars, params);
                Fut<Val> tmp_84 = tmp_83!call();
                Val tmp_85 = tmp_84.get;
                return tmp_85;
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Val op_plus_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( ( intVal(arg1) + arg2 ) );
        }
        Val cmp_lt_int_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( if ( arg1 < IntVal( arg2 ) ) then 1 else 0 );
        }
        }

interface InitI {
        Unit initM();
}

class InitC(List<Loc> globalVars) implements InitI {
        
        
        Unit initM(){
                Mem mem_0 = new Mem(copy(IntVal( 0 ), ( 100 * 1 )));
                this.globalVars = appendright(this.globalVars, Loc( mem_0, 0 ));
                Mem mem_1 = new Mem(copy(PtrVal( NullPtr ), 1));
                this.globalVars = appendright(this.globalVars, Loc( mem_1, 0 ));
                Function_main main = new Function_main(this.globalVars, Nil);
                Fut<Val> fv = main!call();
                Val v = fv.get;
                println(toString(intVal(v)));
        }
        }


{
        InitI initO = new InitC(Nil);
        Fut<Unit> futureResult = initO!initM();
        await futureResult?;
}
