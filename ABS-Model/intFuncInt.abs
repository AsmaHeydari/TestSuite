module TestModule;



data Val = IntVal(Int intVal)| PtrVal(Ptr ptrVal);

data Ptr = NullPtr| Ptr(Loc loc);

data Loc = Loc(Mem mem, Int offset);

interface Mem {
        Val getVal(Int offset);
        Unit setVal(Int offset, Val newVal);
}

def List<A> replace<A>(List<A> l, Int i, A a) = 
        if ( i == 0 ) then Cons( a, tail(l) ) else Cons( head(l), replace(tail(l), ( i - 1 ), a) );

class Mem(List<Val> vals) implements Mem {
        
        
        Val getVal(Int offset){
                return nth(this.vals, offset);
        }
        Unit setVal(Int offset, Val newVal){
                this.vals = replace(this.vals, offset, newVal);
        }
        }

interface Function_m {
        Val call();
}

class Function_m(List<Loc> globalVars, List<Loc> params) implements Function_m {
        List<Loc> localVars = Nil;
        
        Val call(){
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Val> tmp_1 = this!getVal_val(nth(this.params, 0));
                        Fut<Val> tmp_2 = this!getVal_val(nth(this.globalVars, 0));
                        Fut<Val> tmp_3 = this!getVal_val(nth(this.globalVars, 1));
                        Fut<Val> tmp_4 = this!op_plus_fut_fut(tmp_2, tmp_3);
                        Fut<Val> tmp_5 = this!cmp_gt_int_fut_fut(tmp_1, tmp_4);
                        await tmp_5?;
                        Val tmp_11 = tmp_5.get;
                        while (( intVal(tmp_11) != 0 )) {
                                Fut<Val> tmp_7 = this!getVal_val(nth(this.globalVars, 0));
                                Fut<Val> tmp_8 = this!getVal_val(nth(this.globalVars, 1));
                                Fut<Val> tmp_9 = this!op_plus_fut_fut(tmp_7, tmp_8);
                                Fut<Unit> tmp_10 = this!setVal_val_fut(nth(this.globalVars, 0), tmp_9);
                                await tmp_9? & tmp_10?;
                                tmp_1 = this!getVal_val(nth(this.params, 0));
                                tmp_2 = this!getVal_val(nth(this.globalVars, 0));
                                tmp_3 = this!getVal_val(nth(this.globalVars, 1));
                                tmp_4 = this!op_plus_fut_fut(tmp_2, tmp_3);
                                tmp_5 = this!cmp_gt_int_fut_fut(tmp_1, tmp_4);
                                await tmp_5?;
                                tmp_11 = tmp_5.get;
                        }
                        Fut<Val> tmp_12 = this!getVal_val(nth(this.globalVars, 0));
                        await tmp_12?;
                        result = tmp_12.get;
                        returnFlag = True;
                }
                return result;
        }
        Val cmp_gt_int_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( if ( arg1 > arg2 ) then 1 else 0 );
        }
        Val op_plus_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( ( intVal(arg1) + intVal(arg2) ) );
        }
        Unit setVal_val_fut(Loc loc, Fut<Val> fut_value){
                await fut_value?;
                Val value = fut_value.get;
                Fut<Unit> se = mem(loc)!setVal(offset(loc), value);
                se.get;
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        }

interface Function_main {
        Val call();
}

class Function_main(List<Loc> globalVars, List<Loc> params) implements Function_main {
        List<Loc> localVars = Nil;
        
        Val call(){
                Mem mem_0 = new Mem(copy(IntVal( 42 ), 1));
                this.localVars = appendright(this.localVars, Loc( mem_0, 0 ));
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Val> tmp_13 = this!getVal_val(nth(this.localVars, 0));
                        Fut<Val> tmp_14 = this!call_m_fut_0(tmp_13);
                        await tmp_14?;
                        result = tmp_14.get;
                        returnFlag = True;
                }
                return result;
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Val call_m_fut_0(Fut<Val> fut_arg1){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(arg1, 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_m tmp_15 = new Function_m(this.globalVars, params);
                Fut<Val> tmp_16 = tmp_15!call();
                Val tmp_17 = tmp_16.get;
                return tmp_17;
        }
        }

interface InitI {
        Unit initM();
}

class InitC(List<Loc> globalVars) implements InitI {
        
        
        Unit initM(){
                Mem mem_0 = new Mem(copy(IntVal( 2 ), 1));
                this.globalVars = appendright(this.globalVars, Loc( mem_0, 0 ));
                Mem mem_1 = new Mem(copy(IntVal( 3 ), 1));
                this.globalVars = appendright(this.globalVars, Loc( mem_1, 0 ));
                Function_main main = new Function_main(this.globalVars, Nil);
                Fut<Val> fv = main!call();
                Val v = fv.get;
                println(toString(intVal(v)));
        }
        }


{
        InitI initO = new InitC(Nil);
        Fut<Unit> futureResult = initO!initM();
        await futureResult?;
}
